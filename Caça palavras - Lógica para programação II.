#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define maxpal 100
#define tam 25

FILE *arqpal;
int qpal=0;
char palavras[maxpal][20];
char palavrasorteada[20];
char pal[tam][tam];
char palavra;


bool abreArquivo();
void leArquivo();
void mostraPalavras();
void sorteia();
void mostra();
bool verificaPalavra(char *palavra);

//---------------------------------------------
int main () {

  srand(time(NULL));
  if (abreArquivo()==0)
     return 0;
  leArquivo();
  //mostraPalavras();
  strcpy(palavrasorteada,palavras[rand()%maxpal]);
  printf("%s \n",palavrasorteada);
  sorteia();
 
  
   int startRow = rand() % tam; 
   int startCol = rand() % tam;
    
       // insere a palavra na matriz na posição aleatória
    for(int i = 0; i < strlen(palavrasorteada); i++)
    {
        pal[startRow][startCol] = palavrasorteada[i];
        if(startCol < tam-1) // avança para a próxima coluna se possível
        {
            startCol++;
        }
        else // se já estiver na última coluna, volta para a primeira coluna e avança para a próxima linha
        {
            startCol = 0;
            startRow++;
        }
    }
    
    mostra();
    
    
    char palavra[tam+1];
    printf("Digite uma palavra: ");
    scanf("%s", palavra);

    if(verificaPalavra(palavra))
    {
        printf("A palavra %s esta presente na matriz!\n", palavra);
    }
    else
    {
        printf("A palavra %s nao esta presente na matriz!\n", palavra);
    }

  system("pause");
  return 0;
}
//---------------------------------------------
bool abreArquivo(){
  arqpal = fopen("palavra.txt", "r"); //leitura
  if (arqpal == NULL)
  {  // Se houve erro na leitura do arquivo
     printf("Problemas na leitura do arquivo\n");
     system("pause");
     return 0; //não conseguiu abrir o arquivo
  }   
  else
  {
     fclose(arqpal);
     return 1; //conseguiu abrir o arquivo
  }   
}
//---------------------------------------------
void leArquivo(){
   arqpal = fopen("palavra.txt", "r"); //leitura
   qpal=0;
   while (!feof(arqpal))
   {
      //fgets(string,tamanho,arquivo)
      fgets(palavras[qpal],20,arqpal);
      palavras[qpal][strlen(palavras[qpal])-1]='\0';
      qpal++;
   }
   fclose(arqpal);
}
//---------------------------------------------
void mostraPalavras(){
for (int x=0; x<qpal; x++){
     printf("%s\n",palavras[x]);
  }    
  system("pause");
}
//---------------------------------------------
void sorteia(){
  char vog[6]="AEIOU";
  char con[22]="BCDFGHJKLMNPQRSTVXWYZ";
  int cont=1;
  //A=65   Z=90
  for (int x=0; x<tam; x++)
    for (int y=0; y<tam; y++){
      if (cont==1 || cont==3)
      { 
         pal[x][y]=vog[rand()%5];
      }   
      else
      {
         pal[x][y]=con[rand()%21];
      }   
      cont++;
      if (cont>3)
      {
        cont=1; 
      }  
    }      
}
//---------------------------------------------
void mostra(){
  for (int x=0; x<tam; x++){
     for (int y=0; y<tam; y++)
        printf("%c ",pal[x][y]);
     printf("\n");   
  }   
}
//-------------------------------------------------
bool verificaPalavra(char *palavra){
    int i, j, k;
    for(i = 0; i < tam; i++)
    {
        for(j = 0; j < tam; j++)
        {
            // Verifica se a primeira letra da palavra é igual à letra atual da matriz
            if(palavra[0] == pal[i][j])
            {
                // Verifica se a palavra pode estar na horizontal para a direita
                if(strlen(palavra) <= tam - j)
                {
                    for(k = 1; k < strlen(palavra); k++)
                    {
                        if(palavra[k] != pal[i][j+k])
                            break;
                    }
                    if(k == strlen(palavra))
                        return true;
                }
                
                // Verifica se a palavra pode estar na horizontal para a esquerda
                if(strlen(palavra) <= j + 1)
                {
                    for(k = 1; k < strlen(palavra); k++)
                    {
                        if(palavra[k] != pal[i][j-k])
                            break;
                    }
                    if(k == strlen(palavra))
                        return true;
                }
                
                // Verifica se a palavra pode estar na vertical para cima
                if(strlen(palavra) <= tam - i)
                {
                    for(k = 1; k < strlen(palavra); k++)
                    {
                        if(palavra[k] != pal[i+k][j])
                            break;
                    }
                    if(k == strlen(palavra))
                        return true;
                }
                
                // Verifica se a palavra pode estar na vertical para baixo
                if(strlen(palavra) <= i + 1)
                {
                    for(k = 1; k < strlen(palavra); k++)
                    {
                        if(palavra[k] != pal[i-k][j])
                            break;
                    }
                    if(k == strlen(palavra))
                        return true;
                }
            }
        }
    }
    return false;
}
